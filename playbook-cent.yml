# Install on CentOS 6+7
---
- hosts: all
  become: true
  # check_mode: yes  # yes=dry-run

  roles:
    - common
    - repo-epel

  pre_tasks:

    - name: define traditional ethernet facts
      set_fact:
        ansible_eth: "{% set ansible_eth = ansible_eth|default([]) + [hostvars[inventory_hostname]['ansible_' + item]] %}{{ ansible_eth|list }}"
      when: hostvars[inventory_hostname]['ansible_' + item]['type'] == 'ether'
      with_items:
      - "{{ hostvars[inventory_hostname]['ansible_interfaces'] }}"
    - debug: var=ansible_eth.1.ipv4.address
    - debug: var=ansible_host


- hosts: logstash
  become: true
  tasks:

    - name: install elk repo
      copy:
        src: elastic.repo
        dest: /etc/yum.repos.d/elastic.repo
        owner: root
        group: root
        mode: 0644

    # rpm_key and get_url fails if using proxies as ansible only works with http proxies
    # so copy the key file with curl and install it locally
    # also command gives warning for "creates", so use "shell" module
    - name: import ELK key
      shell: curl https://artifacts.elastic.co/GPG-KEY-elasticsearch -o GPG-KEY-elasticsearch
      args:
        warn: false
        creates: GPG-KEY-elasticsearch
      register: elk_key
    # - name: verify download
    #   file: path=GPG-KEY-elasticsearch
    #   register: elk_key
    # - debug: var=elk_key
    - name: import ELK key
      rpm_key: key=GPG-KEY-elasticsearch
      when: elk_key.failed == false
   

    # - name: registering elk repo key 
    #   rpm_key: 
    #     key: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    #     state: present

    - name: Install logstash packages (this may take a while)
      package: name={{ item }} state=present
      with_items:
        - java-1.8.0-openjdk
        - logstash
        # - filebeat 
        # - packetbeat
        # - metricbeat

    - name: logstash config files
      copy: src={{ item.src }} dest=/etc/logstash/conf.d/
      with_items:
        - { src: '10-messages.conf' }
        - { src: '10-staas-commit.conf' }
        - { src: '10-staas-galaxy.conf' }
        - { src: '10-staas-gc.conf' }
        - { src: '10-staas-hardware.conf' }
        - { src: '10-staas-heartbeat.conf' }
        - { src: '10-staas-mds.conf' }
        - { src: '10-staas-metering.conf' }
        - { src: '10-staas-reaper.conf' }
        - { src: '10-staas-replication.conf' }
        - { src: '10-staas-replicationAudit.conf' }
        - { src: '10-staas-stats.conf' }
        - { src: '10-staas-swift.conf' }
        - { src: '10-staas-telemetry.conf' }
        - { src: '10-staas-universe.conf' }
        - { src: '10-syslog.conf' }
        - { src: '30-output' }
      notify:
        - restart logstash
 
    - name: configure logstash.yml
      blockinfile:
        path: /etc/logstash/logstash.yml
        backup: yes      
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        content: |
          slowlog.threshold.warn: 2s
          slowlog.threshold.info: 1s
          slowlog.threshold.debug: 500ms
          slowlog.threshold.trace: 100ms
      notify:
        - restart logstash

    - name: enable and run logstash
      service: name=logstash state=started enabled=yes
      register: logstash_started



- hosts: elastic1
  become: true
  tasks:

    - name: install elk repo
      copy:
        src: elastic.repo
        dest: /etc/yum.repos.d/elastic.repo
        owner: root
        group: root
        mode: 0644

    # rpm_key and get_url fails if using proxies as ansible only works with http proxies
    # so copy the key file with curl and install it locally
    # also command gives warning for "creates", so use "shell" module
    - name: import ELK key
      shell: curl https://artifacts.elastic.co/GPG-KEY-elasticsearch -o GPG-KEY-elasticsearch
      args:
        warn: false
        creates: GPG-KEY-elasticsearch
      register: elk_key
    # - name: verify download
    #   file: path=GPG-KEY-elasticsearch
    #   register: elk_key
    # - debug: var=elk_key
    - name: import ELK key
      rpm_key: key=GPG-KEY-elasticsearch
      when: elk_key.failed == false
   
    # - name: registering elk repo key 
    #   rpm_key: 
    #     key: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    #     state: present

    - name: Install elastic packages (this may take a while)
      package: name={{ item }} state=present
      with_items:
        - java-1.8.0-openjdk
        - elasticsearch
        - kibana

    - name: enable and run elasticsearch
      service: name={{ item }} state=started enabled=yes
      with_items:
        - elasticsearch
        - kibana
      register: elastic_started



  handlers:
    - name: restart logstash
      service: name=logstash state=restarted
    - name: restart elastic
      service: name=elasticsearch state=restarted
