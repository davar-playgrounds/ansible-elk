filter{
   if [opcSvc] == "StoraaS" and [parseFamily] == "swift" and "_grokparsefailure" not in [tags] and "_dateParseFailure" not in [tags] {
		grok{
			match=> [ "messageBody", "%{SYSLOGHOST:sw.host}( %{SYSLOGPROG:sw.module}:)? @cee:%{GREEDYDATA:json_message}"]
		}
		json{
			source=>json_message
		}
		if [sw.module] in ["oracle-swift", "proxy-server"] {
			urldecode { field => "sw.rest.userAgent" }
            urldecode { field => "sw.rest.path" }

            date {
              match => ["time", "dd/MMM/yyyy/HH/mm/ss.SSSSSS"]
              timezone => "UTC"
              target => "sw.rest.customTs"
            }

			 # parse the REST path into account, container, object, and query parameters (where appropriate)
	        if [sw.rest.path] =~ "\/v.*\/.*" and [sw.rest.path] != "/auth/v1.0"{
	          grok {
	            match => { "sw.rest.path" => [
	              "/%{DATA:sw.apiVersion}/%{DATA:u.acct}/%{DATA:u.cont}/%{DATA:g.obj}\?%{GREEDYDATA:sw.rest.qparam}",
	              "/%{DATA:sw.apiVersion}/%{DATA:u.acct}/%{DATA:u.cont}/%{GREEDYDATA:g.obj}",
	              "/%{DATA:sw.apiVersion}/%{DATA:u.acct}/%{DATA:u.cont}\?%{GREEDYDATA:sw.rest.qparam}",
	              "/%{DATA:sw.apiVersion}/%{DATA:u.acct}/%{GREEDYDATA:u.cont}",
	              "/%{DATA:sw.apiVersion}/%{DATA:u.acct}\?%{GREEDYDATA:sw.rest.qparam}",
	              "/%{DATA:sw.apiVersion}/%{GREEDYDATA:u.acct}"
	            ] }
	            tag_on_failure => "_failedUserPathParse"
	            add_tag => "userPath"
	          }

	          urldecode { field => "sw.apiVersion" }
	          urldecode { field => "u.acct" }
	          urldecode { field => "u.cont" }
	          urldecode { field => "g.obj" }
	        }

	        # parse the REST path into account, container, object, and query parameters (where appropriate)
	        if [sw.rest.path] =~ "\/.*\/.*" and [sw.rest.path] != "/auth/v1.0" and "userPath" not in [tags] {
	          grok {
	            match => { "sw.rest.path" => [ "/%{DATA:sw.device}/%{DATA:sw.prt}(/%{GREEDYDATA:sw.obj})?" ] }
	            tag_on_failure => "_failedDevicePathParse"
	            add_tag => "devicePath"
	          }

	          urldecode { field => "sw.device" }
	          urldecode { field => "sw.prt" }
	          urldecode { field => "sw.obj" }
	        }

	        if [msg] =~ "Started child.*" {
         	  grok {
            	match => { "msg" => "Started child %{POSINT:sw.pid}" }
          	  }
          	  mutate { add_field => ["sw.svcAction", "Started"] }
        	}
        	else if [msg] == "SIGTERM received" {
          	  mutate { add_field => ["sw.svcAction", "StopRequested"] }
        	}
        	else if [msg] == "Exited" {
          	  mutate { add_field => ["sw.svcAction", "Stopped"] }
        	}
		}


		if [sw.module] == "object-auditor" and [msg] =~ "Object audit.*mode.*" {
        	grok {
          	  match => { "msg" => "Object audit \(%{DATA:sw.oa.fileFilter}\) \"%{DATA:sw.oa.mode}\" mode completed: %{BASE10NUM:sw.oa.totalDurSecs}s. Total quarantined: %{NONNEGINT:sw.oa.totalQuar}, Total errors: %{NONNEGINT:sw.oa.totalErrs}, Total files/sec: %{BASE10NUM:sw.oa.totalFilesPerSec}, Total bytes/sec: %{BASE10NUM:sw.oa.totalBytesPerSec}, Auditing time: %{BASE10NUM:sw.oa.auditDurSecs}, Rate: %{BASE10NUM:sw.oa.auditRatePerSec}" }
        	}
      	}

      	if [sw.module] == "object-replicator" and [msg] =~ "Object replication complete.*" {
        	grok {
          	  match => { "msg" => "Object replication %{DATA:sw.mw.passStatus}( \(once\))?. \(%{BASE10NUM:sw.mw.durMins} minutes\)" }
        	}
      	}

      	if [sw.module] == "object-expirer" and [msg] =~ "Pass completed.*" {
        	grok {
          	  match => { "msg" => "Pass %{DATA:sw.mw.passStatus} in %{BASE10NUM:sw.mw.durSecs}s; %{NONNEGINT:ss.mw.expiredObjCnt} objects expired" }
        	}
        	if "_grokparsefailure" not in [tags] {
          	  mutate {
            	gsub => ["sw.mw.passStatus", "completed", "complete"]
          	  }
        	}
      	}
	} #end type == 'swift'

	if [type] == 'yum'{
		grok{
			match=> [ "message", "%{GREEDYDATA:message}"]
		}
	}

	if [type] == 'anaconda'{
		grok{
			match=> [ "message", "%{TIME,INT[3]:time} %{LOGLEVEL:level} %{SPACE}: %{GREEDYDATA:message}"]
		}
	}
}