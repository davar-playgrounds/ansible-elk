# Install on CentOS 6+7
---
- hosts: all
  become: true
  # check_mode: yes  # yes=dry-run

  roles:
    - common
    - repo-epel

  pre_tasks:

    - name: define traditional ethernet facts
      set_fact:
        ansible_eth: "{% set ansible_eth = ansible_eth|default([]) + [hostvars[inventory_hostname]['ansible_' + item]] %}{{ ansible_eth|list }}"
      when: hostvars[inventory_hostname]['ansible_' + item]['type'] == 'ether'
      with_items:
      - "{{ hostvars[inventory_hostname]['ansible_interfaces'] }}"
    - debug: var=ansible_eth.1.ipv4.address
    - debug: var=ansible_host

  # tasks:

  #   - name: install CentOS required packages
  #     yum: name={{item}} state=installed update_cache=yes
  #     with_items:
  #       - ntp
  #       - lsof

  #   - name: configure and enable NTP
  #     service: name=ntpd state=started enabled=yes
  #   - name: set timezone
  #     timezone: name=America/Los_Angeles

  #   - name: check TOD and timezone
  #     command: date
  #     register: tod 
  #   - debug: var=tod.stdout_lines

  #   # ensure ntp has time to connect with external servers (centos7)
  #   # - name: ntpdc
  #   #   command: ntpdc -c peer
  #   #   register: ntpdc
  #   # - debug: var=ntpdc.stdout_lines

- hosts: web1
  become: true

  tasks:
    - name: install nginx
      yum: name=nginx state=installed update_cache=yes
      register: nginx_installed
    # - debug: var=nginx_installed

    - name: update nginx index.html
      replace: 
        path: /usr/share/nginx/html/index.html
        regexp: '<strong>nginx</strong> on Fedora'
        replace: '<strong>nginx</strong> on {{ ansible_hostname }}'
        backup: yes

    - name: start and enable nginx
      service: name=nginx state=started enabled=yes
      register: nginx_started
    # - debug: var=nginx_started


- hosts: web2
  become: true
  tasks:
    - name: install apache
      yum: name=httpd state=installed update_cache=yes

    - name: configure apache
      replace: 
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen\s+80\s*$'
        replace: 'Listen 0.0.0.0:80'
        validate: '/usr/sbin/apachectl -t -f %s'
        backup: yes
      notify:
        - restart apache

    - name: set index.html
      copy:
        dest: /var/www/html/index.html
        content: |
          <h1> Welcome to {{ ansible_hostname }} </h1>

        owner: root
        group: root
        mode: 0644
      register: http_index
    # - debug: var=http_index

    - name: enable and run apache
      service: name=httpd state=started enabled=yes
      register: apache_started

  handlers:
    - name: restart apache
      service: name=httpd state=restarted



- hosts: logstash
  become: true
  tasks:

    - name: install elk repo
      copy:
        src: elastic.repo
        dest: /etc/yum.repos.d/elastic.repo
        owner: root
        group: root
        mode: 0644

    # rpm_key and get_url fails if using proxies as ansible only works with http proxies
    # so copy the key file with curl and install it locally
    # also command gives warning for "creates", so use "shell" module
    - name: import ELK key
      shell: curl https://artifacts.elastic.co/GPG-KEY-elasticsearch -o GPG-KEY-elasticsearch
      args:
        warn: false
        creates: GPG-KEY-elasticsearch
      register: elk_key
    # - name: verify download
    #   file: path=GPG-KEY-elasticsearch
    #   register: elk_key
    # - debug: var=elk_key
    - name: import ELK key
      rpm_key: key=GPG-KEY-elasticsearch
      when: elk_key.failed == false
   

    # - name: registering elk repo key 
    #   rpm_key: 
    #     key: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    #     state: present

    - name: Install logstash packages (this may take a while)
      package: name={{ item }} state=present
      with_items:
        - java-1.8.0-openjdk
        - logstash 
        - filebeat 
        - packetbeat
        - metricbeat

    # - name: replace rsyslog
    #   copy:
    #     src: rsyslog.conf
    #     dest: /etc/rsyslog.conf
    #     backup: yes
    #     owner: root
    #     group: root
    #     mode: 0644

    # - name: create logstash logs
    #   copy:
    #     dest: /etc/rsyslog.d/logstash.conf
    #     content: |
    #       local2.=info     /var/log/logstash-access.log    #For Access Log
    #       local2.notice    /var/log/logstash-info.log      #For Service Info - Backend, loadbalancer
    #     owner: root
    #     group: root
    #     mode: 0644
    #   notify:
    #     - restart syslog

    # - name: configure logstash w/ template
    #   template: 
    #     # check_mode: yes  # yes=dry-run
    #     src: logstash.cfg.j2
    #     dest: /etc/logstash/logstash.cfg
    #     validate: /sbin/logstash -f %s -c
    #     backup: yes
    #   notify:
    #     - restart logstash

    # - name: tail logstash.cfg
    #   command: tail -20 /etc/logstash/logstash.cfg
    #   register: results
    # - debug: var=results.stdout_lines
    - name: configure logstash.yml
      blockinfile:
        path: /etc/logstash/logstash.yml
        backup: yes      
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        content: |
          slowlog.threshold.warn: 2s
          slowlog.threshold.info: 1s
          slowlog.threshold.debug: 500ms
          slowlog.threshold.trace: 100ms
      notify:
        - restart logstash

    - name: enable and run logstash
      service: name=logstash state=started enabled=yes
      register: logstash_started

  handlers:
    - name: restart logstash
      service: name=logstash state=restarted
    - name: restart syslog
      service: name=rsyslog state=restarted
